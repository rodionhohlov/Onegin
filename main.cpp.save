//#include<TXlib.h>
#include<stdio.h>
#include<string.h>
#include<sys/stat.h>
#include<stdlib.h>

#define FILE_ADR_ASSERT(ex) if(!(ex)) { printf("error of reading file\n"); abort();}
#define STRING_COUNT_ASSERT(ex) if (!(ex)) { printf("counting strings returns adress NULL"); abort();}

void output_file(char* text);

int main(void) {

    FILE* onegin = fopen("onegin.txt", "r");

    FILE_ADR_ASSERT(onegin);

    const char file_name[11] = "onegin.txt";

    struct stat file_info = {};
    stat(file_name, &file_info);

    rewind(onegin);

    int buf_len = file_info.st_size + 1;

    char* buffer = (char*)calloc(1, buf_len);

    printf("%d\n", buf_len);

    fread(buffer, sizeof(char), buf_len, onegin);

    buffer[buf_len] = '\0';

    /*for (int i = 0; i < 200; i++)
        printf("%c", buffer[i]);*/

    int str_count = 0;

    //printf("%s", buffer);

    char* index = NULL;        //проход по указателям ищем \n
                               //qsort

        char* flag = buffer;

    while(flag != NULL) {

        index = strchr(flag, '\n');

        flag = index + 1;

        printf("adress flag is %p\n", flag);

        str_count++;

        if (index == NULL)
            break;
    }

    printf("%d\n", str_count);

    fclose(onegin);

    output_file(buffer);

    return 0;
}

void output_file(char* text) {

    FILE* res_out = fopen("output.txt", "w");

    if (res_out == NULL) {
        printf("error opening output file\n");
        return;
    }

    fputs(text, res_out);

    fclose(res_out);
}
